DATABASE:Is collection of data(or information) store in one format that can be easily accessed
SQL: Is standard lang we use to "talk" to our database


MYSQL-


For database creation query is:
create database (database name)XYZ..

To use particular database:
use (database name)XYZ..


For database table creation query is:
use XYZ
create table [table name]emp(id int,name varchar(50),
                           dept varchar(50), salary float (8,2))..



RECORD-
To insert records in table query is:
insert into [table name] emp('id','name','table','salary')
                      values (101,'abcd',',admin',4567.12)

update [table name] emp set name='xx',dept='sd', salary=123.34 where id=102
delete from emp where id=101.
delete from emp;



SELECTION-
--OPPERATORS
select * from [table name]emp;
select * from [table name]emp limit 3
select * from [table name] emp where id=101;
select id,name,dept from emp;
select id,name,dept from emp where id=101;
select id,name,dept from rmp where salary>=5000;



SELECTION ADVANCE-
select * from [table name]emp where salary>5000
select * from [table name]emp where salary>=5000
select * from [table name]emp where salary<5000
select * from [table name]emp where salary<=5000
select * from [table name]emp where salary>5000 and salary <=15000
select * from [table name]emp where salary between 5000 and 15000
select * from [table name]emp where salary in(2000,5000,8000)
select * from [table name]emp where salary not in(2000,5000,8000)
select * from [table name]emp where salary>5000 or dept='admin'

select * from [table name]emp where name like '_b%'
select * from [table name]emp where name like 'b%'
select * from [table name]emp where name like '%x'
select * from [table name]emp where name like '%x_'

select * from [table name]emp where name is not null
select * from [table name]emp where name is null
select * from [table name]emp order by name asc
select * from [table name]emp order by name desc
select * from [table name]emp where salary >1000  order by name asc
select * from [table name]emp where dept <> 'admin',



select max(salary) as maximum_salary from [table name]emp
select min(salary) from [table name]emp
select avg(salary) from [table name]emp
select sum(salary) from [table name]emp
select count(salary)/count(*) from [table name]emp

select concat(fname,lname) from [table name]emp;            select concat('dilshad',' ',khan) as CONCAT --> dilshad khan
select reverse(name) from [table name]emp;                  select reverse('dilshad') as REVERSE --> dahslid
select char_length(name) from [table name]emp;              select char_length('dilshad') as LENGTH --> 7('dilshad')
select ucase(name) from  [table name]emp;                   select ucase('dilshad') as UPPER --> DILSHAD
select lcase(name) from  [table name]emp;                   select lcase('DILSHAD') as LOWER --> dilshad


select id,concat(fname,' ',lname) as FULLNAME,reverse(name) as REVERSE ,char_length(name) as LENGTH,ucase(name),lcase(name) from  [table name]emp;
select name,ifnull(salary,0) from [table name]emp;


ALTER-
alter table [table name]emp rename to emp1;
alter table [table name]emp modify name varchar (100);
alter table [table name]emp add doj date;
alter table [table name]emp add doj date after dept;
alter table [table name]emp drop column doj;
drop table emp;
drop database XYZ;



check data type-(imp)
1-Describe [table_name] or Describe table_name;.....
2-show columns from table_name







CONSTRAINTS-
constraints: its specify rule for paticular data in a table..
type of constraints:
1-not null.
2-unique constraints.
3-check constraints.
4-primary key.
5-forein key.

1-NULL
create table emp (id int ,name varchar(50))
Alter table emp modify id int not null.

2-UNIQUE constraints
create table emp(id int,name varchar(50), constraint u1 unique(id))
alter table emp drop constraint u1;
alter table emp add constraint u2 unique id;




3-CHECK constraints.
create table emp (id int,name varchar (50),age int,
                                   constraint chk check (age>=18))
alter table emp drop constraint chk1
alter table emp add constraint chk1 check (id>0)



5-primary key
create table emp (id int,name varchar (50), constraint pk primary key (id))
alter table emp drop constraint pk
alter table emp add constraint pk  primary key(id);

6-foreign key:
create table employee (id int,name varchar (50),
                        constraint pri primary key (id))
create table address (aid int,city varchar (50),eid int,
                    constraint fk foreign key(aid)references employee (id))
alter table address drop foreign key fk.
alter table address add constraint fk1 foreign key (eid) references employee (id)



note:
way 1:
create table emp (id int,name varchar (50),age int,constraint chk1 check (age>=18))
alter table emp drop constraint chk1.

way 2:
create table emp (id int,name varchar (50),age int)
alter table emp add constraint chk1 check (id>0)
alter table emp drop constraint chk1.
 
imp note: same for all constrains..













type of join;
1)Inner join
2)outer join
  i)left outer join
  ii)right outer join
3)cross join




note:- SELECT * 
FROM dilshad_31_join a 
CROSS JOIN dilshad_31_join b 
on a.id=b.id


1)inner join
SELECT a.id a.name,a.branch,ab.salary,ab.number
FROM abcd a
INNER JOIN abcde ab
on a.id=ab.id;


2-i)
SELECT a.id,a.name,a.doj,b.city
FROM dilshad_32_join_city b
left JOIN dilshad_31_join_name a
ON a.id=b.id
where city='kurla';

2-ii)
SELECT *
FROM dilshad_32_join_city b
RIGHT JOIN dilshad_31_join_name a
ON a.id=b.id
where city='kurla'
order by name asc;

3)Cross join
use xyz;
SELECT a.id,a.name,a.branch,aa.salary,aa.number 
FROM abcd  a
CROSS JOIN abcde aa




Trigger:-
 A trigger in MySQL is a set of SQL statements
 that reside in a system catalog.
 It is a special type of stored procedure
 that is invoked automatically in response to an event.
 Each trigger is associated with a table, 
 which is activated on any DML statement
 such as INSERT, UPDATE, or DELETE.
 

Type of Trigger:
1)Before Insert: It is activated before the insertion of data into the table.
2)After Insert: It is activated after the insertion of data into the table.
3)Before Update: It is activated before the update of data in the table.
4)After Update: It is activated after the update of the data in the table.
5)Before Delete: It is activated before the data is removed from the table.
6)After Delete: It is activated after the deletion of data from the table

for delete triger:- drop trigger [triger name];
for show trigger:-SHOW TRIGGERS


1)BEFORE INSERT:-
DELIMITER //
CREATE TRIGGER
[trigge_name]xyz
BEFORE INSERT ON [table_name]employee FOR EACH ROW
BEGIN
IF new.[clm_name]occupation='Scientist' then SET
new.[clm_name]occupation='doctor';
END IF;
END//


2)AFTER INSERT
CREATE TABLE student_info (  
  stud_id int NOT NULL,  
  stud_code varchar(15) DEFAULT NULL,  
  stud_name varchar(35) DEFAULT NULL,  
  subject varchar(25) DEFAULT NULL,  
  marks int DEFAULT NULL,  
  phone varchar(15) DEFAULT NULL,  
  PRIMARY KEY (stud_id)  
)
CREATE TABLE student_detail (  
  stud_id int NOT NULL,  
  stud_code varchar(15) DEFAULT NULL,  
  stud_name varchar(35) DEFAULT NULL,  
  subject varchar(25) DEFAULT NULL,  
  marks int DEFAULT NULL,  
  phone varchar(15) DEFAULT NULL,  
  Lasinserted Time,  
  PRIMARY KEY (stud_id)  
);

IMP:-
DELIMITER //
Create Trigger after_insert_details  
AFTER INSERT ON student_info 
FOR EACH ROW  
BEGIN  
INSERT INTO student_detail VALUES (new.stud_id, new.stud_code,   
new.stud_name, new.subject, new.marks, new.phone, CURTIME());  
END //


3)BEFORE UPDATE
CREATE TABLE sales_info (  
    id INT AUTO_INCREMENT,  
    product VARCHAR(100) NOT NULL,  
    quantity INT NOT NULL DEFAULT 0,  
    fiscalYear SMALLINT NOT NULL,  
    CHECK(fiscalYear BETWEEN 2000 and 2050),  
    CHECK (quantity >=0),  
    UNIQUE(product, fiscalYear),  
    PRIMARY KEY(id)  
);
INSERT INTO sales_info(product, quantity, fiscalYear)  
VALUES  
    ('2003 Maruti Suzuki',110, 2020),  
    ('2015 Avenger', 120,2020),  
    ('2018 Honda Shine', 150,2020),  
    ('2014 Apache', 150,2020);

IMP:-
DELIMITER //
CREATE TRIGGER before_update_salesInfo  
BEFORE UPDATE  
ON sales_info FOR EACH ROW  
BEGIN  
    DECLARE error_msg VARCHAR(255);  
    SET error_msg = ('The new quantity cannot be greater than 2 times the current quantity');  
    IF new.quantity > old.quantity * 2 THEN  
    SIGNAL SQLSTATE '45000'   
    SET MESSAGE_TEXT = error_msg;  
    END IF;  
END //









4)AFTER UPDATES:-
CREATE TABLE students(    
    id int NOT NULL AUTO_INCREMENT,    
    name varchar(45) NOT NULL,    
    class int NOT NULL,    
    email_id varchar(65) NOT NULL,    
    PRIMARY KEY (id)    
);

INSERT INTO students (name, class, email_id)     
VALUES ('Stephen', 6, 'stephen@javatpoint.com'),   
('Bob', 7, 'bob@javatpoint.com'),   
('Steven', 8, 'steven@javatpoint.com'),   
('Alexandar', 7, 'alexandar@javatpoint.com');

CREATE TABLE students_log(    
    user varchar(45) NOT NULL,    
    descreptions varchar(65) NOT NULL  
);


DELIMITER //
CREATE TRIGGER after_updates_studentsinfo
AFTER UPDATE
ON students for EACH ROW 
BEGIN 
INSERT into students_log VALUES (user(),CONCAT('Updates Students Record',OLD.name,'Previous CLass',OLD.class,'Present Class',NEW.class));
END //



5)before dalete:-
CREATE TABLE salaries (  
    emp_num INT PRIMARY KEY,  
    valid_from DATE NOT NULL,  
    amount DEC(8 , 2 ) NOT NULL DEFAULT 0  
);  

INSERT INTO salaries (emp_num, valid_from, amount)  
VALUES  
    (102, '2020-01-10', 45000),  
    (103, '2020-01-10', 65000),  
    (105, '2020-01-10', 55000),  
    (107, '2020-01-10', 70000),  
    (109, '2020-01-10', 40000);  


CREATE TABLE salary_archives (  
    id INT PRIMARY KEY AUTO_INCREMENT,  
    emp_num INT,  
    valid_from DATE NOT NULL,  
    amount DEC(18 , 2 ) NOT NULL DEFAULT 0,  
    deleted_time TIMESTAMP DEFAULT NOW()  
);  

DELIMITER //
CREATE TRIGGER before_delete_salaries  
BEFORE DELETE  ON salaries
FOR EACH ROW  
BEGIN  
    INSERT INTO salary_archives (emp_num, valid_from, amount)  
    VALUES(OLD.emp_num, OLD.valid_from, OLD.amount);  
END// 




6)after delete
CREATE TABLE salaries (  
    emp_num INT PRIMARY KEY,  
    valid_from DATE NOT NULL,  
    amount DEC(8 , 2 ) NOT NULL DEFAULT 0  
);  


INSERT INTO salaries (emp_num, valid_from, amount)  
VALUES  
    (102, '2020-01-10', 45000),  
    (103, '2020-01-10', 65000),  
    (105, '2020-01-10', 55000),  
    (107, '2020-01-10', 70000),  
    (109, '2020-01-10', 40000); 



CREATE TABLE total_salary_budget(  
    total_budget DECIMAL(10,2) NOT NULL  
);  




INSERT INTO total_salary_budget (total_budget)  
SELECT SUM(amount) FROM salaries


DELEMETER //
CREATE TRIGGER after_delete_salaries  
AFTER DELETE  ON salaries 
FOR EACH ROW  
BEGIN  
   UPDATE total_salary_budget SET total_budget = total_budget - old.amount;  
END //
  
DELIMITER ;








Transaction:variable:- set @name='dilsahd'
print: select $name;

SELECT @income(var_name):= MAX(col_name) FROM table_name;  
ex:- SELECT @income:= MAX(income) FROM employees;  
  


start transaction:
insert update delete after then
ROOLBACK(same as undo--> value remain same)
cimmit(value will be add delete update)




Distinct:
CREATE TABLE Persons (
    Personid int NOT NULL AUTO_INCREMENT,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    PRIMARY KEY (Personid)
);
SELECT DISTINCT col_name(age)  FROM table_name(employee);
ditinct:- suppose we have same value nth time it will shaow only one time;






procedure(==function)
A procedure (often called a stored procedure) is a collection of pre-compiled SQL statements stored inside the database. 
It is a subroutine or a subprogram in the regular computing language.
A procedure always contains a name, parameter lists, and SQL statements.

A)
DELIMITER &&
CREATE PROCEDURE get_merit_students()
BEGIN 
SELECT*FROM salaries WHERE amount>30000;
END &&
DELIMITER ;
calling :- call get_merit_students()  ------->  [procedure_name]


B)
DELIMITER &&  
CREATE PROCEDURE amount(IN var1 INT)  
BEGIN  
    SELECT * FROM persons LIMIT var1;  
END &&  
DELIMITER ;
calling  :- call amount(2 or 4 or 6)

C)
DELIMITER &&  
CREATE PROCEDURE display_max_mark (OUT highestmark INT)  
BEGIN  
    SELECT MAX(marks) INTO highestmark FROM student_info;   
END &&  
DELIMITER ;
calling :- CALL display_max_mark(@M);   SELECT @M


drop:-
drop procedure get_merit_students











function:
A)
DELIMITER &&
CREATE FUNCTION get_designation_name(d_id int) RETURNS varchar(20)
BEGIN
DECLARE de_name varchar(20) DEFAULT"";
SELECT name into de_name FROM students WHERE id=d_id;
RETURN de_name;
End &&
calling :- SELECT get_designation_name(1)


DELIMITER &&
CREATE FUNCTION get_class1(de_id int) RETURNS varchar(30)
BEGIN 
DECLARE de_class varchar(30) DEFAULT"";
SELECT class into de_class FROM students WHERE id=de_id;
RETURN de_class;
END &&
calling :- SELECT get_class1(1);






1)operators done
2)constrain done
3)join done
4)trigger done
5)transaction done
6)distinct done
7)stored procedure done
8)stored function done;


imp:- join, procedure, function and selectors xyz

note:
date format:-'yy-mm-dd' 
time format:- 'hr:min:sec'